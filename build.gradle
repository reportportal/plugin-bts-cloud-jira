import com.github.spotbugs.SpotBugsTask

plugins {
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
    id 'java'
    id 'jacoco'
    id "com.github.spotbugs" version "3.0.0"
    id "com.github.node-gradle.node" version "2.2.1"
    id 'nu.studer.jooq' version '3.0.3'
}

apply from: 'project-properties.gradle'

def scriptsUrl = 'https://raw.githubusercontent.com/reportportal/gradle-scripts/' +
        (releaseMode ? getProperty('scripts.version') : 'develop')

apply from: 'jooq.gradle'
apply from: 'ui.gradle'
apply from: scriptsUrl + '/release-fat.gradle'
apply from: scriptsUrl + '/signing.gradle'

repositories {
    maven { url "https://packages.atlassian.com/maven/repository/public" }
    mavenCentral { url "https://repo1.maven.org/maven2" }

    if (!releaseMode) {
        maven { url 'https://jitpack.io' }
    }
}

dependencyManagement {
    imports {
        mavenBom(releaseMode ? 'com.epam.reportportal:commons-bom:5.11.2' : 'com.epam.reportportal:commons-bom:5.11.2')
    }
}

dependencies {
    if (releaseMode) {
        implementation 'com.epam.reportportal:commons-dao'
        implementation 'com.epam.reportportal:plugin-api'
        annotationProcessor 'com.epam.reportportal:plugin-api'
    } else {
        implementation 'com.github.reportportal:commons-dao:5807fb1'
        implementation 'com.github.reportportal:plugin-api:a9a8b73'
        annotationProcessor 'com.github.reportportal:plugin-api:a9a8b73'
    }
    implementation 'org.hibernate:hibernate-core:5.6.15.Final'

    implementation group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
    implementation group: 'org.jooq', name: 'jooq', version: '3.14.4'
    jooqRuntime 'org.postgresql:postgresql:42.7.3'

    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'org.slf4j:slf4j-api:1.7.25'

    compile 'io.atlassian.fugue:fugue:4.7.2'
    compile 'com.atlassian.jira:jira-rest-java-client-core:5.2.1'

    testImplementation('org.junit.jupiter:junit-jupiter:5.6.0')

}

spotbugs {
    sourceSets = [sourceSets.main]
    reportLevel = "high"
}
tasks.withType(SpotBugsTask) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

test {
    useJUnitPlatform()
    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }
}

build.dependsOn jacocoTestReport

artifacts {
    archives shadowJar
}

sourceSets {
    main {
        resources
                {
                    exclude '**'
                }
    }
}

generatePomFileForShadowPublication { pom.packaging = "jar" }

jar {
    from("src/main/resources") {
        into("/resources")
    }
    from("ui/build") {
        into("/resources")
    }
    manifest {
        attributes(
                "Class-Path": configurations.compile.collect { it.getName() }.join(' '),
                "Plugin-Id": "${pluginId}",
                "Plugin-Version": "${project.version}",
                "Plugin-Provider": "Report Portal",
                "Plugin-Class": "com.epam.reportportal.extension.jira.CloudJiraPlugin",
                "Plugin-Service": "api"
        )
    }
}

shadowJar {
    archiveClassifier.set(null)
    from("src/main/resources") {
        into("/resources")
    }
    from("ui/build") {
        into("/resources")
    }
    configurations = [project.configurations.compile]
    zip64 true
    dependencies {
        exclude(dependency('com.github.reportportal:'))
        exclude(dependency('com.epam.reportportal:'))
        exclude(dependency('org.springframework:'))
        exclude(dependency('org.springframework.security:'))
        exclude(dependency('org.springframework.data:'))
        exclude(dependency('org.springframework.boot:'))
        exclude(dependency('ch.qos.logback:'))
        exclude(dependency('org.slf4j:'))
    }
}

task plugin(type: Jar) {
    getArchiveBaseName().set("plugin-${pluginId}")
    into('classes') {
        with jar
    }
    into('lib') {
        from configurations.compile
    }
    extension('zip')
}

task assemblePlugin(type: Copy) {
    from plugin
    into pluginsDir
}

task assemblePlugins(type: Copy) {
    dependsOn subprojects.assemblePlugin
}

compileJava.dependsOn npm_run_build

