plugins {
    id 'io.spring.dependency-management' version '1.1.7'
    id 'java'
    id 'jacoco'
    id "com.github.node-gradle.node" version "2.2.1"
    id "org.springframework.boot" version "3.4.2" apply false
}

apply from: 'project-properties.gradle'

def scriptsUrl = 'https://raw.githubusercontent.com/reportportal/gradle-scripts/' +
        (releaseMode ? getProperty('scripts.version') : 'develop')

apply from: 'ui.gradle'
apply from: scriptsUrl + '/release-fat.gradle'
apply from: scriptsUrl + '/signing.gradle'

repositories {
    mavenCentral { url "https://repo1.maven.org/maven2" }
    maven { url "https://packages.atlassian.com/maven/repository/public" }

    if (!releaseMode) {
        maven { url 'https://jitpack.io' }
    }
}

dependencyManagement {
    imports {
        mavenBom(releaseMode ? 'com.epam.reportportal:commons-bom:5.12.1' : 'com.epam.reportportal:commons-bom:5.12.1')
    }
}
ext['spring-boot.version'] = "${springBootVersion}"

dependencies {
    // ALL new dependencies should be included in shadowJar plugin!
    // transitive dependencies may be required as well. could be checked in runtime only!
    if (releaseMode) {
        implementation 'com.epam.reportportal:commons-dao'
        implementation 'com.epam.reportportal:plugin-api'
        annotationProcessor 'com.epam.reportportal:plugin-api'
    } else {
        implementation 'com.github.reportportal:commons-dao:11fa2a6'
        implementation 'com.github.reportportal:plugin-api:8874441'
        annotationProcessor 'com.github.reportportal:plugin-api:8874441'
    }

    implementation("com.atlassian.jira:jira-rest-java-client-core:6.0.1")
    implementation "io.atlassian.fugue:fugue:6.0.1"

    testImplementation('org.junit.jupiter:junit-jupiter:5.11.4')
}

test {
    useJUnitPlatform()
    jacocoTestReport {
        reports {
            xml.required = true
        }
    }
}

build.dependsOn jacocoTestReport

artifacts {
    archives shadowJar
}

sourceSets {
    main {
        resources
                {
                    exclude '**'
                }
    }
}

generatePomFileForShadowPublication { pom.packaging = "jar" }

jar {
    from("src/main/resources") {
        into("/resources")
    }
    from("ui/build") {
        into("/resources")
    }
    manifest {
        attributes(
                "Class-Path": configurations.compileClasspath.collect { it.getName() }.join(' '),
                "Plugin-Id": "${pluginId}",
                "Plugin-Version": "${project.version}",
                "Plugin-Provider": "Report Portal",
                "Plugin-Class": "com.epam.reportportal.extension.jira.CloudJiraPlugin",
                "Plugin-Service": "api"
        )
    }
}

shadowJar {
    from("src/main/resources") {
        into("/resources")
    }
    from("ui/build") {
        into("/resources")
    }
    configurations = [project.configurations.compileClasspath]
    zip64 true
    dependencies {
        include(dependency("com.atlassian.jira:jira-rest-java-client-api:.*"))
        include(dependency("com.atlassian.jira:jira-rest-java-client-core:.*"))
        include(dependency("com.atlassian.httpclient:atlassian-httpclient-api:.*"))
        include(dependency("com.atlassian.httpclient:atlassian-httpclient-library:.*"))
        include(dependency("com.atlassian.sal:sal-api:.*"))
        include(dependency("com.atlassian.event:atlassian-event:.*"))
        include(dependency("io.atlassian.util.concurrent:atlassian-util-concurrent:.*"))
        include(dependency("io.atlassian.fugue:fugue:.*"))
        include(dependency("org.apache.httpcomponents:httpasyncclient:.*"))
        include(dependency("org.apache.httpcomponents:httpasyncclient-cache:.*"))
        include(dependency("org.apache.httpcomponents:httpclient:.*"))
        include(dependency("org.apache.httpcomponents:httpclient-cache:.*"))
        include(dependency("org.apache.httpcomponents:httpcore:.*"))
        include(dependency("org.apache.httpcomponents:httpcore-nio:.*"))
        include(dependency("org.apache.httpcomponents:httpcore-mime:.*"))
        include(dependency("org.glassfish.jersey.core:jersey-server:.*"))
        include(dependency("org.glassfish.jersey.core:jersey-common:.*"))
        include(dependency("jakarta.ws.rs:jakarta.ws.rs-api:.*"))
        include(dependency("jakarta.annotation:jakarta.annotation-api:.*"))
        include(dependency("org.glassfish.hk2.external:jakarta.inject:.*"))
        include(dependency("org.glassfish.hk2:osgi-resource-locator:.*"))
        include(dependency("org.glassfish.jaxb:jaxb-runtime:.*"))
    }
}

task plugin(type: Jar) {
    getArchiveBaseName().set("plugin-${pluginId}")
    into('classes') {
        with jar
    }
    into('lib') {
        from configurations.compileClasspath
    }
    archiveExtension.set('zip')
}

task assemblePlugin(type: Copy) {
    from plugin
    into pluginsDir
}

task assemblePlugins(type: Copy) {
    dependsOn subprojects.assemblePlugin
}

compileJava.dependsOn npm_run_build

